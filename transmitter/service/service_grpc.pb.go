// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: service/service.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transmitter_UploadFile_FullMethodName  = "/transmitter.Transmitter/UploadFile"
	Transmitter_GetFile_FullMethodName     = "/transmitter.Transmitter/GetFile"
	Transmitter_GetFileList_FullMethodName = "/transmitter.Transmitter/GetFileList"
	Transmitter_GetFileInfo_FullMethodName = "/transmitter.Transmitter/GetFileInfo"
)

// TransmitterClient is the client API for Transmitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitterClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Transmitter_UploadFileClient, error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Transmitter_GetFileClient, error)
	GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error)
}

type transmitterClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitterClient(cc grpc.ClientConnInterface) TransmitterClient {
	return &transmitterClient{cc}
}

func (c *transmitterClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Transmitter_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transmitter_ServiceDesc.Streams[0], Transmitter_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transmitterUploadFileClient{stream}
	return x, nil
}

type Transmitter_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type transmitterUploadFileClient struct {
	grpc.ClientStream
}

func (x *transmitterUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transmitterUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transmitterClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (Transmitter_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transmitter_ServiceDesc.Streams[1], Transmitter_GetFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transmitterGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transmitter_GetFileClient interface {
	Recv() (*GetFileResponse, error)
	grpc.ClientStream
}

type transmitterGetFileClient struct {
	grpc.ClientStream
}

func (x *transmitterGetFileClient) Recv() (*GetFileResponse, error) {
	m := new(GetFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transmitterClient) GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error) {
	out := new(GetFileListResponse)
	err := c.cc.Invoke(ctx, Transmitter_GetFileList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transmitterClient) GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error) {
	out := new(GetFileInfoResponse)
	err := c.cc.Invoke(ctx, Transmitter_GetFileInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransmitterServer is the server API for Transmitter service.
// All implementations must embed UnimplementedTransmitterServer
// for forward compatibility
type TransmitterServer interface {
	UploadFile(Transmitter_UploadFileServer) error
	GetFile(*GetFileRequest, Transmitter_GetFileServer) error
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	mustEmbedUnimplementedTransmitterServer()
}

// UnimplementedTransmitterServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitterServer struct {
}

func (UnimplementedTransmitterServer) UploadFile(Transmitter_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedTransmitterServer) GetFile(*GetFileRequest, Transmitter_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedTransmitterServer) GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedTransmitterServer) GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedTransmitterServer) mustEmbedUnimplementedTransmitterServer() {}

// UnsafeTransmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitterServer will
// result in compilation errors.
type UnsafeTransmitterServer interface {
	mustEmbedUnimplementedTransmitterServer()
}

func RegisterTransmitterServer(s grpc.ServiceRegistrar, srv TransmitterServer) {
	s.RegisterService(&Transmitter_ServiceDesc, srv)
}

func _Transmitter_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransmitterServer).UploadFile(&transmitterUploadFileServer{stream})
}

type Transmitter_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type transmitterUploadFileServer struct {
	grpc.ServerStream
}

func (x *transmitterUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transmitterUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transmitter_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmitterServer).GetFile(m, &transmitterGetFileServer{stream})
}

type Transmitter_GetFileServer interface {
	Send(*GetFileResponse) error
	grpc.ServerStream
}

type transmitterGetFileServer struct {
	grpc.ServerStream
}

func (x *transmitterGetFileServer) Send(m *GetFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Transmitter_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitterServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transmitter_GetFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitterServer).GetFileList(ctx, req.(*GetFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transmitter_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransmitterServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transmitter_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransmitterServer).GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transmitter_ServiceDesc is the grpc.ServiceDesc for Transmitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transmitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transmitter.Transmitter",
	HandlerType: (*TransmitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileList",
			Handler:    _Transmitter_GetFileList_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _Transmitter_GetFileInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Transmitter_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _Transmitter_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/service.proto",
}
